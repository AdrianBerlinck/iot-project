[
    {
        "id": "c073de9ba7ed9db1",
        "type": "tab",
        "label": "IOT -> MQTT -> DB -> WS",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "46860586a1ef1f65",
        "type": "tab",
        "label": "Fluxo 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "cc199aacb07edde3",
        "type": "tab",
        "label": "Fluxo 3",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "dab3ad35f7fbabda",
        "type": "mqtt-broker",
        "name": "Broker",
        "broker": "mosquitto",
        "port": 1883,
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "37506c72251a603c",
        "type": "mongodb4-client",
        "name": "ConectionMongoDB",
        "protocol": "mongodb",
        "hostname": "mongo",
        "port": "27017",
        "dbName": "iot-project",
        "appName": "",
        "authSource": "",
        "authMechanism": "DEFAULT",
        "tls": false,
        "tlsCAFile": "",
        "tlsCertificateKeyFile": "",
        "tlsInsecure": false,
        "connectTimeoutMS": "30000",
        "socketTimeoutMS": "0",
        "minPoolSize": "0",
        "maxPoolSize": "100",
        "maxIdleTimeMS": "0",
        "uri": "",
        "advanced": "{}",
        "uriTabActive": "tab-uri-simple"
    },
    {
        "id": "fc3856078f0dd452",
        "type": "mqtt in",
        "z": "c073de9ba7ed9db1",
        "name": "Device Info",
        "topic": "device/+/info",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "dab3ad35f7fbabda",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 240,
        "wires": [
            [
                "cb1462e0934a9a73"
            ]
        ]
    },
    {
        "id": "678b76c3c4b14476",
        "type": "debug",
        "z": "c073de9ba7ed9db1",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 460,
        "wires": []
    },
    {
        "id": "de1a752d8ca4a0e6",
        "type": "function",
        "z": "c073de9ba7ed9db1",
        "name": "Parse Info -> Device Upsert -> WS",
        "func": "const deviceId = msg.payload.device_id;\nif(!deviceId) return null;\n\nmsg.collection = \"devices\";\nmsg.operation = \"updateOne\";\n\nconst update = {\n    $set: {\n        device_id: deviceId,\n        model: msg.payload.model || null,\n        firmware: msg.payload.firmware || null,\n        ip_address: msg.payload.ip_address || null,\n        location: msg.payload.location || null,\n        update_at: new Date(),\n        status: {\n            last_info_ts: new Date(),\n        },\n        raw: JSON.stringify(msg.payload)\n    },\n    $setOnInsert: { created_at: new Date(), _id: msg.payload._id }\n}\n\nmsg.payload = [{ device_id: deviceId }, update, { upsert: true }];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 240,
        "wires": [
            [
                "e2f46f02fa6dcced"
            ]
        ]
    },
    {
        "id": "e2f46f02fa6dcced",
        "type": "mongodb4",
        "z": "c073de9ba7ed9db1",
        "clientNode": "37506c72251a603c",
        "mode": "collection",
        "collection": "",
        "operation": "",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "Device",
        "x": 970,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "3d97eab662707380",
        "type": "mqtt in",
        "z": "c073de9ba7ed9db1",
        "name": "Device Status",
        "topic": "device/+/status",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "dab3ad35f7fbabda",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 360,
        "wires": [
            [
                "660990a0e4fe5f49"
            ]
        ]
    },
    {
        "id": "b04b7d98158a701c",
        "type": "function",
        "z": "c073de9ba7ed9db1",
        "name": "Parse Status -> WS",
        "func": "const retain = !!msg.retain;\nlet data = {};\ntry { \n    data = (typeof msg.payload === 'string') ? JSON.parse(msg.payload) : msg.payload;\n} catch { \n    return null;\n}\n\nconst parts = (msg.topic || '').split('/');\nconst device_id = parts[1];\nif (!device_id) return null;\n\nconst now = new Date();\nconst set = { 'status.last_seen': now, updated_at: now };\n\nif (data.type === 'state') {\n    if (data.target && data.target.startsWith('led_')){\n        set[`state.leds.${data.target}`] = (data.state === 'on');\n    } \n\n    if (data.target === 'servo_1' && Number.isFinite(+data.angle)){\n        set['state.servo_1'] = +data.angle;\n    }\n\n    if (data.target === 'motor1' && data.state) {\n        set['state.motor1'] = (data.state === 'on');\n    }\n    set['state.updated_at'] = now;\n} else if (data.type === 'snapshot') {\n    if (data.leds) {\n        for (const k of Object.keys(data.leds)) {\n            set[`state.leds.${k}`] = !!data.leds[k]\n        };\n    }\n    \n    if (Number.isFinite(+data.servo_1)) { \n        set['state.servo_1'] = +data.servo_1\n    };\n\n    if (typeof data.motor1 === 'boolean') {\n        set['state.motor1'] = data.motor1;\n    }\n\n    set['state.updated_at'] = now;\n} else if (data.type === 'ping') {\n    // presen√ßa apenas\n}\n\nmsg.collection = 'devices';\nmsg.operation = 'updateOne';\nmsg.payload = [\n    { device_id }, \n    { $set: set, $setOnInsert: { created_at: now, device_id, _id: msg.payload._id } }, \n    { upsert: true }\n];\nmsg._wsEvent = { kind: 'status', id: device_id, data, retain };\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 360,
        "wires": [
            [
                "e2f46f02fa6dcced"
            ]
        ]
    },
    {
        "id": "cb1462e0934a9a73",
        "type": "uuid",
        "z": "c073de9ba7ed9db1",
        "uuidVersion": "v4",
        "namespaceType": "",
        "namespace": "",
        "namespaceCustom": "",
        "name": "",
        "field": "payload._id",
        "fieldType": "msg",
        "x": 350,
        "y": 240,
        "wires": [
            [
                "de1a752d8ca4a0e6"
            ]
        ]
    },
    {
        "id": "660990a0e4fe5f49",
        "type": "uuid",
        "z": "c073de9ba7ed9db1",
        "uuidVersion": "v4",
        "namespaceType": "",
        "namespace": "",
        "namespaceCustom": "",
        "name": "",
        "field": "payload._id",
        "fieldType": "msg",
        "x": 350,
        "y": 360,
        "wires": [
            [
                "b04b7d98158a701c"
            ]
        ]
    },
    {
        "id": "19541a0b1db84b29",
        "type": "mqtt in",
        "z": "c073de9ba7ed9db1",
        "name": "Device Telemetry",
        "topic": "device/+/telemetry",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "dab3ad35f7fbabda",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 460,
        "wires": [
            [
                "678b76c3c4b14476"
            ]
        ]
    }
]